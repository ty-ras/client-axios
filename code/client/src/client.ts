/**
 * @file This file contains function to create {@link dataFE.CallHTTPEndpoint} which will use Axios library to do the requests.
 */

import * as data from "@ty-ras/data";
import * as dataFE from "@ty-ras/data-frontend";
import axios, {
  type CreateAxiosDefaults,
  type AxiosInstance,
  type AxiosRequestConfig,
  AxiosHeaders,
} from "axios";

/**
 * This function will create a {@link dataFE.CallHTTPEndpoint} callback using new or given Axios instance.
 *
 * Notice that unless Axios instance is explicitly specified via {@link HTTPEndpointCallerOptionsInstance.instance}, a new Axios instance will be created.
 * @param argsOrURL The {@link HTTPEndpointCallerArgs}: either base URL string (HTTP1 protocol will be used then), or structured information about the HTTP protocol version and associated settings.
 * @returns A {@link dataFE.CallHTTPEndpoint} callback which can be used to create instances of {@link dataFE.APICallFactoryBase}.
 * It will also throw whatever the {@link URL} constructor might throw, if passed invalid URL as `string` value.
 * @see HTTPEndpointCallerArgs
 */
export const createCallHTTPEndpoint = (
  argsOrURL: HTTPEndpointCallerArgs,
): dataFE.CallHTTPEndpoint => {
  const args: HTTPEndpointCallerOptions =
    typeof argsOrURL === "string"
      ? { config: { baseURL: argsOrURL } }
      : argsOrURL;
  const instance: AxiosInstance =
    "config" in args ? axios.create(args.config) : args.instance;
  const reviver = data.getJSONParseReviver(args.allowProtoProperty === true);
  const processRequestConfig = args.processRequestConfig;

  return async (args) => {
    const {
      status,
      headers,
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      data: body,
    } = await instance(await getAxiosArgs(args, processRequestConfig));

    if (status < 200 || status >= 300) {
      throw new dataFE.Non2xxStatusCodeError(status);
    }

    return {
      headers: Object.fromEntries(
        Object.entries(headers).filter(
          ([, header]) => header !== undefined && header !== null,
        ),
      ),
      body:
        ((body as string | undefined)?.length ?? 0) > 0
          ? // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            JSON.parse(body, reviver)
          : undefined,
    };
  };
};

/**
 * This type is the argument of {@link createCallHTTPEndpoint}.
 * It can be either string, which is then interpreted as full URL.
 * Alternatively, it can be a structured object {@link HTTPEndpointCallerOptions}.
 * @see HTTPEndpointCallerOptions
 */
export type HTTPEndpointCallerArgs = HTTPEndpointCallerOptions | string;

/**
 * These options used to create callback thru {@link createCallHTTPEndpoint} should be either {@link HTTPEndpointCallerOptionsConfig} for specifying Axios instance creation parameters, or {@link HTTPEndpointCallerOptionsInstance} to directly provide instance to Axios.
 */
export type HTTPEndpointCallerOptions =
  | HTTPEndpointCallerOptionsConfig
  | HTTPEndpointCallerOptionsInstance;

/**
 * This interface contains properties used in {@link createCallHTTPEndpoint} when configuration for new Axios instance is provided.
 */
export interface HTTPEndpointCallerOptionsConfig
  extends HTTPEndpointCallerOptionsBase {
  /**
   * The configuration for new Axios instance to use. Must contain at least {@link CreateAxiosDefaults.baseURL} property.
   */
  config: Omit<
    CreateAxiosDefaults,
    | "url"
    | "method"
    | "params"
    | "paramsSerializer"
    | "data"
    | "auth"
    | "baseURL"
  > &
    Required<Pick<CreateAxiosDefaults, "baseURL">>;
}

/**
 * This interface contains properties used in {@link createCallHTTPEndpoint} when the Axios instance itself is provided.
 */
export interface HTTPEndpointCallerOptionsInstance
  extends HTTPEndpointCallerOptionsBase {
  /**
   * The Axios instance to use.
   */
  instance: AxiosInstance;
}

/**
 * This interface contains properties common for both {@link HTTPEndpointCallerOptionsConfig} and {@link HTTPEndpointCallerOptionsInstance}.
 */
export interface HTTPEndpointCallerOptionsBase {
  /**
   * If set to `true`, will NOT strip the `__proto__` properties of the result.
   */
  allowProtoProperty?: boolean;

  /**
   * This property can be used as an escape hatch for when some advanced tweaking is needed to {@link AxiosRequestConfig} objects created by this library.
   * @param requestConfig The {@link AxiosRequestConfig} generated by this library.
   * @returns Potentially asynchronously should return nothing.
   */
  processRequestConfig?: AxiosRequestConfigProcessor;
}

/**
 * This callback type specifies the shape of {@link HTTPEndpointCallerOptionsBase.processRequestConfig}.
 */
export type AxiosRequestConfigProcessor = (
  requestConfig: AxiosRequestConfig,
) => void | Promise<void>;

const getAxiosArgs = async (
  { method, url, query, body, headers }: dataFE.HTTPInvocationArguments,
  processRequestConfig: AxiosRequestConfigProcessor | undefined,
): Promise<AxiosRequestConfig> => {
  if (body !== undefined) {
    headers = {
      ...(headers ?? {}),
      "content-type": `application/json; charset=${ENCODING}`,
    };
  }

  const requestConfig: AxiosRequestConfig = {
    method,
    url: dataFE.ensurePathname(url),
    ...(headers === undefined
      ? {}
      : {
          headers: new AxiosHeaders(dataFE.getOutgoingHeaders(headers)),
        }),
    ...(query === undefined
      ? {}
      : { params: dataFE.getURLSearchParams(query) }),
    ...(body === undefined
      ? {}
      : { data: Buffer.from(JSON.stringify(body), ENCODING) }),
  };
  await processRequestConfig?.(requestConfig);
  return {
    ...requestConfig,
    // Use text as response type since we JSON.parse the result
    responseType: "text",
    // Never throw Axios error based on status code, since we have own code for that
    validateStatus: () => true,
  };
};

const ENCODING: BufferEncoding = "utf8";
